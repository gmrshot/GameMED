import React, { useEffect, useMemo, useState } from "react";

// Nucleic Acids — Gamified Study Game with 50 Patient Vignettes
// Dark mode • Mobile friendly • XP & Streak • PDF-referenced explanations
// Source PDF: Nucleic Acids (Prasad, 2025)

// ------------------------------------
// Helpers
// ------------------------------------
function classNames(...arr) { return arr.filter(Boolean).join(" "); }
const randInt = (n) => Math.floor(Math.random() * n);

// Deterministic shuffle per-question so answers aren't always "A"
function mulberry32(seed){return function(){let t=seed+=0x6D2B79F5;t=Math.imul(t^t>>>15,t|1);t^=t+Math.imul(t^t>>>7,t|61);return ((t^t>>>14)>>>0)/4294967296;}};
function seededShuffle(arr, seed){const a=[...arr];const rnd=mulberry32(seed);for(let i=a.length-1;i>0;i--){const j=Math.floor(rnd()* (i+1));[a[i],a[j]]=[a[j],a[i]];}return a;}

// Tiny CSS shake keyframes
const ShakeCSS = () => (
  <style>{`@keyframes shake{0%{transform:translateX(0)}25%{transform:translateX(-3px)}50%{transform:translateX(3px)}75%{transform:translateX(-2px)}100%{transform:translateX(0)}}`}</style>
);

const HeartBar = ({ lives }) => (
  <div className="flex gap-1 items-center" title="Lives">
    {Array.from({ length: 3 }).map((_, i) => (
      <span key={i} className={classNames("text-xl", i < lives ? "opacity-100" : "opacity-30")}>❤️</span>
    ))}
  </div>
);

const StreakChip = ({ streak }) => (
  <div className="px-3 py-1 rounded-full bg-zinc-800 border border-zinc-700 text-sm">Streak: <span className="font-semibold">{streak}</span></div>
);

const XpBar = ({ xp }) => (
  <div className="w-full h-3 rounded-full bg-zinc-800 border border-zinc-700 overflow-hidden" title="XP toward next level">
    <div className="h-full bg-gradient-to-r from-indigo-500 to-emerald-500" style={{ width: `${Math.min(100, (xp % 100))}%` }} />
  </div>
);

const Toggle = ({ on, setOn, left="Off", right="On" }) => (
  <div className="flex items-center gap-2">
    <button onClick={() => setOn(false)} className={classNames("px-3 py-1 rounded-l-xl border border-zinc-700", !on?"bg-indigo-600":"bg-zinc-800")}>{left}</button>
    <button onClick={() => setOn(true)} className={classNames("px-3 py-1 rounded-r-xl border border-zinc-700 -ml-px", on?"bg-indigo-600":"bg-zinc-800")}>{right}</button>
  </div>
);

// ------------------------------------
// Minimal Level Map (Interactive Summary) — each heading becomes a Level
// Color code: blue=super high-yield, green=important, gray=background
// ThoughtBubble explains acronyms/terms in funny-simple language
// ------------------------------------
const LEVELS = [
  { id: "denaturation", title: "Denaturation & Renaturation", ref: "p.4 Denaturation (melting)", bullets: [
    { color: "blue", text: "High GC = High Tm (stronger glue).", el5: "GC pairs have 3 hooks vs AT 2 hooks. More hooks = needs more heat to split." },
    { color: "blue", text: "Hyperchromic shift at 260 nm when DNA melts.", el5: "Melted DNA shows brighter at 260 — like pages fanned out catching more light." },
    { color: "green", text: "Renaturation needs slow cooling + salt.", el5: "Give exes time and the right vibes (salt) and they get back together correctly." },
  ], terms: [
    { term: "Tm", explain: "Melting temp where ~50% of DNA is unzipped. Think of a breakup threshold." },
    { term: "GC", explain: "G≡C uses 3 H-bonds (extra Velcro) vs A=T (2)." },
  ]},
  { id: "hybridization", title: "Hybridization & Stringency", ref: "p.5 Hybridization", bullets: [
    { color: "blue", text: "High stringency = picky match (↑temp, ↓salt).", el5: "Hot + low salt = only soulmates pair up." },
    { color: "green", text: "Low stringency tolerates mismatches (good for cousins, bad for SNPs).", el5: "Cool + salty = anyone with similar haircut gets a date." },
  ], terms: [
    { term: "Stringency", explain: "Dating app filter: high stringency = only exact match; low = anyone with similar haircut." },
  ]},
  { id: "prokDNA", title: "Prokaryotic DNA", ref: "p.6 Prokaryotic DNA", bullets: [
    { color: "blue", text: "Closed circular, negatively supercoiled.", el5: "Bacterial DNA = tiny rubber band, twisted to stay compact." },
    { color: "blue", text: "Gyrase (Topo II) introduces negative supercoils (ATP).", el5: "Gyrase = DNA masseuse that kneads twists in (target of cipro)." },
  ], terms: [
    { term: "Gyrase", explain: "Bacterial stress-relief masseuse for DNA. Target of cipro; blocks resealing = DNA tantrum." },
  ]},
  { id: "eukDNA", title: "Eukaryotic DNA", ref: "p.7 Eukaryotic DNA", bullets: [
    { color: "blue", text: "Linear chromosomes with telomeres (3' overhangs).", el5: "Ends have shoelace tips (aglets) so they don’t frazzle." },
    { color: "green", text: "Introns removed; exons expressed.", el5: "Edit the movie: cut the bloopers (introns), keep the scenes (exons)." },
  ], terms: [
    { term: "Telomeres", explain: "Shoelace tips (aglets) that stop fraying; telomerase = time machine repair crew." },
  ]},
  { id: "repeats", title: "Repetitive DNA", ref: "p.8–9 Repetitive DNA", bullets: [
    { color: "blue", text: "Microsatellites = 2–6 bp repeats; Minisatellites (10–100 bp).", el5: "Short drum beats vs longer drum loops." },
    { color: "green", text: "LINEs (~5–6 kb) & SINEs (~100–200 nt).", el5: "Long hitchhikers vs short hitchhikers in the genome." },
    { color: "green", text: "Some trinucleotide repeats cause disease (CAG/CTG, CGG/CCG).", el5: "Triplet tongue-twisters that, when overdone, break stuff." },
  ], terms: [
    { term: "VNTR", explain: "Copy-number barcodes for people. Forensics loves these." },
  ]},
  { id: "chromatin", title: "Chromatin & Nucleosome", ref: "p.10 Chromatin", bullets: [
    { color: "blue", text: "~150 bp wraps histone octamer; H1 guards linker DNA.", el5: "DNA wraps like yarn around a spool; H1 is the clip between spools." },
    { color: "green", text: "Euchromatin = open/active; Heterochromatin = silent.", el5: "Open book vs locked safe." },
  ], terms: [
    { term: "H1", explain: "Hall monitor between nucleosomes; keeps hallway neat." },
  ]},
  { id: "epigenetics", title: "Epigenetics: DNA & Histones", ref: "p.11–14 Epigenetic Modifications", bullets: [
    { color: "blue", text: "Promoter CpG methylation → gene OFF (\"Methyl = Mute\").", el5: "Tape over the light switch: promoter can't turn on." },
    { color: "blue", text: "Histone acetylation → open chromatin (ON).", el5: "Loosens DNA's hug on histones so polymerase can get in." },
    { color: "green", text: "H3K4me3 activates; H3K27me3 represses.", el5: "Not all methyls are evil; depends on the address on histone tails." },
  ], terms: [
    { term: "CpG island", explain: "Cluster of CGs near promoters; methyl marks = duct tape on the light switch." },
    { term: "HDAC inhibitor", explain: "Takes off the silence muffler → genes speak up. Valproate cameo." },
  ]},
  { id: "rna-structure", title: "RNA Structure & Functions", ref: "p.15–16 RNA", bullets: [
    { color: "blue", text: "Mostly single-stranded; folds with intra-strand pairing (antiparallel).", el5: "One noodle folding on itself to make shapes." },
    { color: "green", text: "rRNA catalyzes peptide bonds (ribozyme).", el5: "Ribosome isn't just a protein club; RNA swings the catalytic hammer." },
  ], terms: [
    { term: "Ribozyme", explain: "RNA that moonlights as an enzyme. Surprise!" },
  ]},
  { id: "rna-types", title: "RNA Types & Key Facts", ref: "p.17–22 Types of RNA", bullets: [
    { color: "blue", text: "Abundance: rRNA ≫ tRNA ≫ mRNA (least).", el5: "Most of the room is rRNA furniture; mRNA is the guest of honor but shows up least." },
    { color: "blue", text: "mRNA (euk): 5' cap (5'–5'), 3' poly(A). Prok: often polycistronic, no cap/polyA.", el5: "Euk message wears a CAP and TAIL to the party; bacteria roll in a bus (many genes)." },
    { color: "green", text: "tRNA ends with 3'-CCA (amino acid hook).", el5: "Every tRNA has a universal parking spot labeled C-C-A for its cargo." },
  ], terms: [
    { term: "16S rRNA", explain: "Helps spot the first start codon — the translator's GPS." },
    { term: "CCA tail", explain: "Universal parking spot for amino acids at tRNA's 3' end." },
  ]},
  { id: "regRNAs", title: "Regulatory RNAs (miRNA, lncRNA)", ref: "p.24 Regulatory RNAs", bullets: [
    { color: "blue", text: "miRNA: post-transcriptional silencing (cut it or choke translation).", el5: "Tiny bouncers that either tear up the message or block the ribosome." },
    { color: "blue", text: "Xist lncRNA coats an X → silences it.", el5: "A chromosome-sized blanket that tucks one X to sleep." },
  ], terms: [
    { term: "miRNA", explain: "Tiny mafia: either breaks the message or keeps ribosomes away." },
    { term: "Xist", explain: "Blanket that tucks one X to sleep. Nighty-night, chromosome." },
  ]},
];

// ------------------------------------
// ThoughtBubble term helper & Bullet with ELI5 toggle
// ------------------------------------
const ThoughtBubble = ({ label, explain }) => {
  const [open, setOpen] = useState(false);
  return (
    <span className="inline-block">
      <button onClick={() => setOpen(!open)} className="ml-2 text-xs px-2 py-0.5 rounded-full bg-zinc-800 border border-zinc-700 hover:bg-zinc-700">
        💭 {label}
      </button>
      {open && (
        <div className="mt-2 p-3 rounded-xl bg-zinc-900 border border-zinc-700 text-sm max-w-md">
          {explain}
        </div>
      )}
    </span>
  );
};

const BulletLine = ({ b }) => {
  const [open, setOpen] = useState(false);
  return (
    <li className={classNames("text-sm", b.color==="blue"?"text-sky-300": b.color==="green"?"text-emerald-300":"text-zinc-300")}>• {b.text}
      {b.el5 && (
        <button onClick={()=>setOpen(!open)} className="ml-2 text-[10px] px-2 py-0.5 rounded-full bg-zinc-800 border border-zinc-700 hover:bg-zinc-700">ELI5</button>
      )}
      {open && b.el5 && (
        <div className="mt-2 text-zinc-300 bg-zinc-900/70 border border-zinc-700 rounded-lg p-2">{b.el5}</div>
      )}
    </li>
  );
};

// ------------------------------------
// ELI5 plumbing: harvest simple explanations from LEVELS and map vignettes to a Level
// ------------------------------------
const LEVEL_ELI5 = Object.fromEntries(
  LEVELS.map(L => [L.id, (L.bullets.find(b => b.el5)?.el5) || null])
);

// very lightweight keyword map -> level id
const LEVEL_GUESSERS = [
  { re: /(denatur|hyperchrom|Tm|renatur|melting)/i, id: "denaturation" },
  { re: /(hybridiz|stringenc|GLUT)/i, id: "hybridization" },
  { re: /(gyrase|cipro|prokaryot(ic)? DNA|supercoil)/i, id: "prokDNA" },
  { re: /(telomer|exon|intron|eukar(y|i)ot(ic)? DNA)/i, id: "eukDNA" },
  { re: /(microsatellite|minisatellite|VNTR|LINE|SINE|repeat)/i, id: "repeats" },
  { re: /(nucleosome|histone|H1|chromatin|euchromatin|heterochromatin)/i, id: "chromatin" },
  { re: /(CpG|methyl|acetyl|H3K4|H3K27|HDAC|DNMT|epigenet)/i, id: "epigenetics" },
  { re: /\bRNA\b.*(structure|fold|ribozyme)/i, id: "rna-structure" },
  { re: /\b(rRNA|tRNA|mRNA|poly\(A\)|cap|Shine)/i, id: "rna-types" },
  { re: /(miRNA|lncRNA|Xist|silenc)/i, id: "regRNAs" },
];

function guessLevelIdFromStem(stem) {
  const hit = LEVEL_GUESSERS.find(g => g.re.test(stem));
  return hit ? hit.id : null;
}

// ------------------------------------
// VIGNETTES (50) with deterministic shuffled choices + ELI5
// ------------------------------------
const RAW_VIGNETTES = [
  // 1..50 (unchanged stems/choices/answers/explanations)
  { id: 1, stem: "A 24-year-old woman with suspected monogenic hearing loss has a negative hybridization-based screen despite a strong family history. The lab used a low-stringency protocol. Which best explains the false-negative?", choices: ["Hybridization at low stringency tolerates mismatches and may not discriminate single–base changes","Denaturation at high temperature causes DNA depurination","High salt prevents any duplex formation","Only RNA can hybridize under these conditions","Hybridization requires ligase activity to detect variants"], answer: 0, explanation: "Low-stringency hybridization (lower temperature, higher salt) allows annealing of closely related sequences and is generally not suitable for precise detection of point mutations. Reference: Nucleic Acids (Prasad, 2025) — p.5, Hybridization." },
  { id: 2, stem: "A researcher compares melting temperatures (Tm) of two DNA fragments. Fragment A is 70% GC; Fragment B is 40% GC. Which is true?", choices: ["Fragment A has a higher Tm due to greater GC content","Fragment B has a higher Tm due to more AT pairs","Tm is independent of base composition","Tm depends only on length, not GC%","Tm only applies to RNA duplexes"], answer: 0, explanation: "GC base pairs contribute more to duplex stability; higher GC% raises Tm. Denaturation produces a hyperchromic shift at 260 nm. Reference: Nucleic Acids (Prasad, 2025) — p.4, Denaturation (melting)." },
  { id: 3, stem: "During a PCR setup, which condition would most favor DNA strand separation (denaturation)?", choices: ["Increased temperature and low ionic strength","Gradual cooling with high salt concentration","Neutral pH and magnesium ions","Addition of histones","Lowering temperature below room temperature"], answer: 0, explanation: "High temperature and low ionic strength favor denaturation; cooling with appropriate salt favors renaturation. Reference: Nucleic Acids (Prasad, 2025) — p.4, Denaturation (melting)." },
  { id: 4, stem: "A radiolabeled probe designed for GLUT1 mRNA shows signal for GLUT2 under certain conditions. Which protocol change will make the probe more specific for GLUT1?", choices: ["Increase hybridization temperature and reduce salt concentration","Decrease temperature and increase salt concentration","Add DNA ligase to the hybridization buffer","Use RNA polymerase instead of reverse transcriptase","Increase magnesium concentration to stabilize mismatches"], answer: 0, explanation: "Higher stringency (higher temperature, lower salt) restricts annealing to highly complementary sequences, reducing cross-hybridization to related mRNAs like GLUT2. Reference: Nucleic Acids (Prasad, 2025) — p.5, Hybridization." },
  { id: 5, stem: "A patient with pyelonephritis is started on ciprofloxacin. The drug stabilizes DNA double-strand breaks created by a bacterial enzyme, preventing resealing. Which enzyme is targeted?", choices: ["DNA gyrase (type II topoisomerase)","DNA polymerase III","Topoisomerase I","Helicase","Ligase"], answer: 0, explanation: "Fluoroquinolones target bacterial DNA gyrase (topoisomerase II), blocking resealing of double-strand breaks. Reference: Nucleic Acids (Prasad, 2025) — p.6, Salient Features of Prokaryotic DNA." },
  // ... keep all items 6–50 exactly as in your file ...
];

// recompute shuffled choices + correctIndex, and attach ELI5 from LEVELS
const VIGNETTES = RAW_VIGNETTES.map((v) => {
  const idxs = v.choices.map((_, i) => i);
  const shuffledIdxs = seededShuffle(idxs, v.id * 1337);
  const choices = shuffledIdxs.map(i => v.choices[i]);
  const correctIndex = shuffledIdxs.indexOf(v.answer);

  const levelId = guessLevelIdFromStem(v.stem);
  const eli5 = levelId ? LEVEL_ELI5[levelId] : null;

  return { ...v, choices, correctIndex, eli5 };
});

// ------------------------------------
// Vignette Card — change selection anytime; submit for feedback (with ELI5 toggle)
// ------------------------------------
const VignetteCard = ({ v, initialPick, initialSubmitted, onPick, onSubmit, onUnsubmit }) => {
  const [picked, setPicked] = useState(initialPick ?? null);
  const [submitted, setSubmitted] = useState(!!initialSubmitted);

  useEffect(() => { setPicked(initialPick ?? null); setSubmitted(!!initialSubmitted); }, [v.id, initialPick, initialSubmitted]);

  const isCorrect = picked === v.correctIndex;

  const clickChoice = (i) => {
    if (submitted) { setSubmitted(false); onUnsubmit?.(); }
    setPicked(i); onPick?.(i);
  };

  return (
    <div className="p-5 rounded-2xl bg-zinc-800/60 border border-zinc-700">
      <div className="text-zinc-100 text-lg font-medium mb-3">{v.stem}</div>
      <div className="grid gap-3">
        {v.choices.map((c, i) => (
          <button key={i} onClick={() => clickChoice(i)}
            className={classNames("text-left px-4 py-3 rounded-xl border transition",
              picked === i ? "bg-zinc-700 border-zinc-500" : "bg-zinc-900/50 border-zinc-700 hover:bg-zinc-800",
              submitted && picked === i && (isCorrect ? "ring-2 ring-emerald-400" : "animate-[shake_0.2s_ease-in-out_2] ring-2 ring-rose-400")
            )}>
            <span className="text-zinc-100">{c}</span>
          </button>
        ))}
      </div>
      <div className="mt-4 flex items-center gap-2">
        {!submitted ? (
          <button onClick={() => { if (picked != null) { setSubmitted(true); onSubmit?.(picked, picked === v.correctIndex); } }}
            className="px-4 py-2 rounded-xl bg-emerald-600 hover:bg-emerald-500">Submit</button>
        ) : (
          <div className={classNames("mt-2 p-3 rounded-lg text-sm leading-relaxed", isCorrect ? "bg-emerald-600/20 text-emerald-300" : "bg-rose-600/20 text-rose-300")}> 
            {isCorrect ? "Correct!" : "Not quite."}
            <div className="mt-2 text-zinc-300">{v.explanation}</div>

            {v.eli5 && (
              <details className="mt-3 bg-zinc-900/70 border border-zinc-700 rounded-lg p-3 text-zinc-200">
                <summary className="cursor-pointer select-none">Explain like I’m 5</summary>
                <div className="mt-2 text-zinc-300">{v.eli5}</div>
              </details>
            )}
          </div>
        )}
      </div>
    </div>
  );
};

// ------------------------------------
// Boss Fight — 5 random questions, quick challenge (progression unlocks on pass)
// ------------------------------------
const BossFight = ({ onClose, onDone }) => {
  const [indices] = useState(() => {
    const set = new Set();
    while (set.size < 5) set.add(randInt(VIGNETTES.length));
    return Array.from(set);
  });
  const [i, setI] = useState(0);
  const [score, setScore] = useState(0);
  const [picked, setPicked] = useState(null);
  const [submitted, setSubmitted] = useState(false);

  const v = VIGNETTES[indices[i]];
  const correct = picked === v.correctIndex;

  const finish = () => { onClose(); onDone?.(score); };

  return (
    <div className="fixed inset-0 bg-black/70 backdrop-blur-sm flex items-center justify-center z-50">
      <div className="max-w-3xl w-full mx-4 p-5 rounded-2xl bg-zinc-900 border border-zinc-700">
        <div className="flex items-center justify-between">
          <h3 className="text-xl font-semibold">Boss Fight ⚔️</h3>
          <button onClick={finish} className="px-3 py-1 rounded-lg bg-zinc-800 hover:bg-zinc-700">Exit</button>
        </div>
        <div className="text-sm text-zinc-400 mb-2">Question {i+1} / 5 • Score: {score}</div>
        <div className="p-4 rounded-xl bg-zinc-800/60 border border-zinc-700">
          <div className="text-zinc-100 font-medium mb-3">{v.stem}</div>
          <div className="grid gap-3">
            {v.choices.map((c, idx) => (
              <button key={idx} onClick={() => { setPicked(idx); }} className={classNames("text-left px-4 py-3 rounded-xl border",
                picked === idx ? "bg-zinc-700 border-zinc-500" : "bg-zinc-900/50 border-zinc-700 hover:bg-zinc-800")}>{c}</button>
            ))}
          </div>
          <div className="mt-3 flex gap-2">
            {!submitted ? (
              <button className="px-3 py-2 rounded-xl bg-emerald-600 hover:bg-emerald-500" onClick={() => { if (picked!=null){ setSubmitted(true); if (correct) setScore(s=>s+1);} }}>Submit</button>
            ) : (
              <div className={classNames("px-3 py-2 rounded-lg", correct?"bg-emerald-600/20 text-emerald-300":"bg-rose-600/20 text-rose-300")}>{correct?"Correct":"Nope"}</div>
            )}
            {submitted && (
              <button className="px-3 py-2 rounded-xl bg-indigo-600 hover:bg-indigo-500" onClick={() => { if (i<4){ setI(i+1); setPicked(null); setSubmitted(false);} else { finish(); } }}>Next</button>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

// ------------------------------------
// Level Modal — clickable topics open details
// ------------------------------------
const LevelModal = ({ level, onClose }) => {
  if (!level) return null;
  return (
    <div className="fixed inset-0 bg-black/70 backdrop-blur-sm flex items-center justify-center z-50">
      <div className="max-w-2xl w-full mx-4 p-5 rounded-2xl bg-zinc-900 border border-zinc-700">
        <div className="flex items-center justify-between mb-2">
          <h3 className="text-xl font-semibold">{level.title}</h3>
          <button onClick={onClose} className="px-3 py-1 rounded-lg bg-zinc-800 hover:bg-zinc-700">Close</button>
        </div>
        <div className="text-xs text-zinc-400 mb-3">Reference: Nucleic Acids (Prasad, 2025) — {level.ref}</div>
        <ul className="space-y-2">
          {level.bullets.map((b, i) => <BulletLine key={i} b={b} />)}
        </ul>
        <div className="mt-3 flex flex-wrap gap-2">
          {level.terms.map((t, i) => <ThoughtBubble key={i} label={t.term} explain={t.explain} />)}
        </div>
      </div>
    </div>
  );
};
// ------------------------------------
// Main App — XP, streak, lives; Levels with toggle (Progression vs Free Explore) and Boss Fight toggle
// ------------------------------------
export default function App() {
  const [tab, setTab] = useState("vignettes");
  const [idx, setIdx] = useState(0);
  const [xp, setXp] = useState(0);
  const [streak, setStreak] = useState(0);
  const [lives, setLives] = useState(3);
  const [gameOver, setGameOver] = useState(false);

  // Boss + Levels state
  const [bossEnabled, setBossEnabled] = useState(false); // user toggle
  const [showBoss, setShowBoss] = useState(false);
  const [freeExplore, setFreeExplore] = useState(true);
  const [unlockedUpTo, setUnlockedUpTo] = useState(0); // index of last unlocked level in progression
  const [openLevel, setOpenLevel] = useState(null);

  // Per-question state for vignettes
  const [answers, setAnswers] = useState(() => VIGNETTES.map(() => ({ picked: null, submitted: false, gotCorrect: false, awarded: false })));
  const v = VIGNETTES[idx];
  const a = answers[idx];

  // Lives auto-reset when reaching 0
  useEffect(() => {
    if (lives === 0) {
      setGameOver(true);
      const t = setTimeout(() => { setLives(3); setGameOver(false); }, 1500);
      return () => clearTimeout(t);
    }
  }, [lives]);

  const submit = (picked, correct) => {
    setAnswers(prev => { const c=[...prev]; c[idx] = { ...c[idx], picked, submitted:true, gotCorrect: correct || c[idx].gotCorrect }; return c; });
    if (correct && !answers[idx].awarded) {
      setXp(x => x + 25);
      setStreak(s => s + 1);
      setAnswers(prev => { const c=[...prev]; c[idx] = { ...c[idx], awarded:true }; return c; });
    }
    if (!correct) { setStreak(0); setLives(l => Math.max(0, l-1)); }
  };
  const unsubmit = () => setAnswers(prev => { const c=[...prev]; c[idx] = { ...c[idx], submitted:false }; return c; });
  const pick = (picked) => setAnswers(prev => { const c=[...prev]; c[idx] = { ...c[idx], picked }; return c; });
  const next = () => { if (idx + 1 < VIGNETTES.length) setIdx(idx + 1); };
  const prev = () => { if (idx > 0) setIdx(idx - 1); };

  // Global progress
  const mastered = answers.filter(q => q.gotCorrect).length;
  const progressPct = Math.round((mastered / VIGNETTES.length) * 100);

  // Unlock logic: in progression mode, next level unlocks only after Boss clears
  const canOpenLevel = (i) => freeExplore || i <= unlockedUpTo;
  const showStartBossFor = (i) => bossEnabled && !freeExplore && i === unlockedUpTo;

  return (
    <div className="min-h-screen bg-zinc-950 text-zinc-100 p-4 sm:p-6">
      <ShakeCSS />
      {/* Header */}
      <div className="max-w-5xl mx-auto space-y-5">
        <header className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-3">
          <div>
            <h1 className="text-2xl font-bold">Nucleic Acids — Study Game</h1>
            <p className="text-zinc-400 text-sm">50 Patient Vignettes • XP & Streak • PDF-linked explanations</p>
          </div>
          <div className="flex items-center gap-3">
            <HeartBar lives={lives} />
            <StreakChip streak={streak} />
            <div className="px-3 py-1 rounded-full bg-zinc-800 border border-zinc-700 text-sm">XP: <span className="font-semibold">{xp}</span></div>
          </div>
        </header>

        {/* Progress */}
        <XpBar xp={xp} />
        <div className="text-xs text-zinc-500">Vignettes mastered: {mastered}/{VIGNETTES.length} • Progress: {progressPct}%</div>

        {/* Tabs */}
        <div className="flex gap-2">
          <button onClick={() => setTab("vignettes")} className={classNames("px-3 py-2 rounded-xl", tab === "vignettes" ? "bg-indigo-600" : "bg-zinc-800")}>Patient Vignettes</button>
          <button onClick={() => setTab("levels")} className={classNames("px-3 py-2 rounded-xl", tab === "levels" ? "bg-indigo-600" : "bg-zinc-800")}>Levels</button>
        </div>

        {tab === "levels" && (
          <div className="space-y-4">
            <div className="flex flex-wrap items-center gap-3 justify-between">
              <div className="flex items-center gap-3">
                <span className="text-sm text-zinc-400">Levels Mode:</span>
                <Toggle on={freeExplore} setOn={setFreeExplore} left="Progression 🔒" right="Free Explore 📖" />
              </div>
              <div className="flex items-center gap-3">
                <span className="text-sm text-zinc-400">Boss Fight:</span>
                <Toggle on={bossEnabled} setOn={setBossEnabled} left="Off" right="On" />
                {showStartBossFor(unlockedUpTo) && (
                  <button onClick={() => setShowBoss(true)} className="px-3 py-2 rounded-xl bg-rose-600 hover:bg-rose-500">Start Boss ⚔️</button>
                )}
              </div>
            </div>

            {/* Level Cards (clickable when unlocked) */}
            <div className="grid sm:grid-cols-2 gap-4">
              {LEVELS.map((L, i) => {
                const locked = !canOpenLevel(i);
                return (
                  <button key={L.id} disabled={locked} onClick={() => { if (!locked) setOpenLevel(L); }}
                    className={classNames("text-left p-4 rounded-2xl border transition",
                      locked?"bg-zinc-900/40 border-zinc-800 opacity-50 cursor-not-allowed":"bg-zinc-900 border-zinc-700 hover:bg-zinc-800")}> 
                    <div className="flex items-center justify-between mb-2">
                      <h3 className="text-lg font-semibold">{L.title}</h3>
                      <span className="text-xs text-zinc-400">Reference: Nucleic Acids (Prasad, 2025) — {L.ref}</span>
                    </div>
                    <ul className="space-y-1">
                      {L.bullets.map((b, j) => (
                        <BulletLine key={j} b={b} />
                      ))}
                    </ul>
                    <div className="mt-2 flex flex-wrap gap-2">
                      {L.terms.map((t, k) => (<ThoughtBubble key={k} label={t.term} explain={t.explain} />))}
                    </div>
                    {locked && <div className="mt-3 text-xs text-zinc-500">🔒 Beat the previous Boss to unlock</div>}
                    {!locked && !freeExplore && i < unlockedUpTo && <div className="mt-3 text-xs text-emerald-400">✅ Cleared</div>}
                    {!locked && !freeExplore && i === unlockedUpTo && bossEnabled && <div className="mt-3 text-xs text-sky-300">⚔️ Boss available</div>}
                  </button>
                );
              })}
            </div>
          </div>
        )}

        {tab === "vignettes" && (
          <div className="space-y-4">
            <div className="flex items-center justify-between">
              <h2 className="text-xl font-semibold">Case {idx + 1} / {VIGNETTES.length}</h2>
              <div className="text-sm text-zinc-400">XP: {xp}</div>
            </div>
            <VignetteCard v={v} initialPick={a.picked} initialSubmitted={a.submitted}
              onPick={picked => setAnswers(prev => { const c=[...prev]; c[idx] = { ...c[idx], picked }; return c; })}
              onSubmit={(picked, correct) => submit(picked, correct)}
              onUnsubmit={() => setAnswers(prev => { const c=[...prev]; c[idx] = { ...c[idx], submitted:false }; return c; })} />
            <div className="flex justify-end gap-2">
              {idx > 0 && (<button onClick={() => setIdx(idx-1)} className="px-3 py-2 rounded-xl bg-zinc-800 hover:bg-zinc-700">← Prev</button>)}
              {idx + 1 < VIGNETTES.length && (<button onClick={() => setIdx(idx+1)} className="px-3 py-2 rounded-xl bg-emerald-600 hover:bg-emerald-500">Next →</button>)}
            </div>
          </div>
        )}
      </div>

      {/* Game Over hearts reset */}
      {gameOver && (
        <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/70 backdrop-blur-sm">
          <div className="p-6 rounded-2xl bg-zinc-900 border border-zinc-700 text-center max-w-sm w-full">
            <div className="text-4xl mb-2">🧬💥</div>
            <div className="text-lg font-semibold mb-2">Game Over</div>
            <div className="text-zinc-400 text-sm">Hearts refilling…</div>
          </div>
        </div>
      )}

      {/* Boss Fight modal + Level modal */}
      {bossEnabled && !freeExplore && showBoss && (
        <BossFight 
          onClose={() => setShowBoss(false)} 
          onDone={(score)=>{ 
            setShowBoss(false); 
            if (score>=3){ 
              setUnlockedUpTo(u => Math.min(LEVELS.length-1, u+1)); 
            } 
          }} 
        />
      )}
      {openLevel && <LevelModal level={openLevel} onClose={()=>setOpenLevel(null)} />}
    </div>
  );
}
